AWSTemplateFormatVersion: '2010-09-09'
Description: Step Function invoking Lambdas

Parameters:
  Stage:
    Type: String
    Default: Dev

Resources:
  # --- IAM Role for State Machine ---
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: # References Lambdas it will invoke
                  - !GetAtt FirstLambdaFunction.Arn
                  - !GetAtt SecondLambdaFunction.Arn

  # --- First Lambda ---
  FirstLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  FirstLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "FirstLambda-${Stage}"
      Handler: index.handler
      Role: !GetAtt FirstLambdaRole.Arn
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('First Lambda executed:', event);
            return { ...event, first_status: 'Complete' };
          };

  # --- Second Lambda ---
  SecondLambdaRole:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Version: "2012-10-17"
         Statement:
           - Effect: Allow
             Principal:
               Service: lambda.amazonaws.com
             Action: sts:AssumeRole
       ManagedPolicyArns:
         - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SecondLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "SecondLambda-${Stage}"
      Handler: index.handler
      Role: !GetAtt SecondLambdaRole.Arn
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Second Lambda executed:', event);
            return { ...event, second_status: 'Complete' };
          };

  # --- State Machine ---
  MyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "MyWorkflow-${Stage}"
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "A simple state machine that invokes two Lambdas",
          "StartAt": "InvokeFirstLambda",
          "States": {
            "InvokeFirstLambda": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${FirstLambdaFunction.Arn}",
                "Payload.$": "$"
              },
              "Next": "InvokeSecondLambda"
            },
            "InvokeSecondLambda": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${SecondLambdaFunction.Arn}",
                "Payload.$": "$"
              },
              "End": true
            }
          }
        }

Outputs:
  StateMachineArn:
    Description: ARN of the State Machine
    Value: !Ref MyStateMachine 