AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda with VPC config for potential RDS access

Parameters:
  Stage:
    Type: String
    Default: Dev
  # Parameters for VPC - replace with your actual VPC/Subnet/SG IDs or Refs if needed
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for Lambda and RDS
  PrivateSubnetA:
    Type: AWS::EC2::Subnet::Id
    Description: A private subnet ID
  PrivateSubnetB:
    Type: AWS::EC2::Subnet::Id
    Description: Another private subnet ID
  DbPassword:
    Type: String
    NoEcho: true
    Description: Password for the RDS database master user

Resources:
  # --- Security Group for Lambda ---
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda accessing RDS
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1 # Allow all outbound for simplicity (restrict in production)

  # --- Security Group for RDS ---
  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS Instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LambdaSecurityGroup # Allow access FROM Lambda SG
          IpProtocol: tcp
          FromPort: 5432 # Example for PostgreSQL
          ToPort: 5432

  # --- RDS Instance ---
  MyDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "mydb-${Stage}"
      Engine: postgres
      EngineVersion: "14.5"
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MasterUsername: dbadmin
      MasterUserPassword: !Ref DbPassword
      VPCSecurityGroups:
        - !Ref DbSecurityGroup
      # DBSubnetGroupName: !Ref MyDbSubnetGroup # Recommended to use Subnet Group
      MultiAZ: false
      StorageType: gp2
      PubliclyAccessible: false

  # --- Lambda Function Role ---
  DbLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole # Needed for VPC access
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # --- Lambda Function in VPC ---
  DbLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "DbAccessor-${Stage}"
      Handler: index.handler
      Role: !GetAtt DbLambdaRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          import os
          # import psycopg2 # Would need this layer/dependency

          DB_HOST = os.environ['DB_HOST']
          DB_NAME = os.environ['DB_NAME']
          DB_USER = os.environ['DB_USER']
          # Password typically from Secrets Manager in real app

          def handler(event, context):
              print(f"Attempting to connect to DB: {DB_HOST}")
              # connection = psycopg2.connect(host=DB_HOST, database=DB_NAME, user=DB_USER, ...)
              # ... interact with DB ...
              return {'status': 'DB interaction simulated'}
      Environment:
        Variables:
          DB_HOST: !GetAtt MyDatabase.Endpoint.Address
          DB_NAME: "mydatabase" # Example name
          DB_USER: "dbadmin"
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB

Outputs:
  DbEndpoint:
    Description: RDS Database Endpoint Address
    Value: !GetAtt MyDatabase.Endpoint.Address
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref DbLambdaFunction 