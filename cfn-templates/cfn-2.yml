AWSTemplateFormatVersion: '2010-09-09'
Description: AppSync API with Lambda and DynamoDB Datasources

Parameters:
  Stage:
    Type: String
    Default: Dev

Resources:
  # --- DynamoDB Table ---
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "AppSyncItems-${Stage}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # --- IAM Role for AppSync Datasources (Lambda and DDB) ---
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncDataSourcePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow # Allow invoking the resolver Lambda
                Action: lambda:InvokeFunction
                Resource: !GetAtt ItemResolverLambda.Arn
              - Effect: Allow # Allow accessing the DynamoDB table
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt ItemsTable.Arn

  # --- Lambda Function (Resolver Logic) ---
  ItemResolverLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaDDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow # Lambda needs to access DDB too
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt ItemsTable.Arn

  ItemResolverLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "ItemResolver-${Stage}"
      Handler: index.handler
      Role: !GetAtt ItemResolverLambdaRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          import os
          import boto3
          DDB_TABLE = os.environ['TABLE_NAME']
          # ddb = boto3.resource('dynamodb')
          # table = ddb.Table(DDB_TABLE)
          def handler(event, context):
              print("Resolver event:", event)
              # Simplified: Pass through or fetch from DDB based on event type/field
              # if event['info']['fieldName'] == 'getItem': ...
              return event.get('arguments', {})
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemsTable

  # --- AppSync GraphQL API ---
  MyGraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "MyItemsApi-${Stage}"
      AuthenticationType: API_KEY # Simplest auth for example

  # --- AppSync API Key ---
  MyApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt MyGraphQLApi.ApiId

  # --- AppSync Schema ---
  MyGraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt MyGraphQLApi.ApiId
      Definition: |
        type Item {
          id: ID!
          name: String
        }
        type Query {
          getItem(id: ID!): Item
        }
        type Mutation {
          addItem(id: ID!, name: String): Item
        }
        schema {
          query: Query
          mutation: Mutation
        }

  # --- AppSync Data Sources ---
  LambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt MyGraphQLApi.ApiId
      Name: ItemLambdaDataSource
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ItemResolverLambda.Arn # Reference Lambda

  DynamoDBDataSource:
      Type: AWS::AppSync::DataSource
      Properties:
        ApiId: !GetAtt MyGraphQLApi.ApiId
        Name: ItemDynamoDBDataSource
        Type: AMAZON_DYNAMODB
        ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
        DynamoDBConfig:
          TableName: !Ref ItemsTable # Reference DynamoDB
          AwsRegion: !Ref AWS::Region

  # --- AppSync Resolvers ---
  GetItemResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt MyGraphQLApi.ApiId
      TypeName: Query
      FieldName: getItem
      DataSourceName: !GetAtt LambdaDataSource.Name # Use Lambda DS for Query
      # RequestMappingTemplate: ... VTL or Direct Lambda
      # ResponseMappingTemplate: ... VTL or Direct Lambda

  AddItemResolver:
      Type: AWS::AppSync::Resolver
      Properties:
        ApiId: !GetAtt MyGraphQLApi.ApiId
        TypeName: Mutation
        FieldName: addItem
        DataSourceName: !GetAtt DynamoDBDataSource.Name # Use DDB DS for Mutation
        RequestMappingTemplate: |
          {
            "version": "2017-02-28",
            "operation": "PutItem",
            "key": {
              "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
            },
            "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args)
          }
        ResponseMappingTemplate: $util.toJson($ctx.result)

Outputs:
  GraphQLApiUrl:
    Description: URL of the AppSync GraphQL API
    Value: !GetAtt MyGraphQLApi.GraphQLUrl
  ApiKey:
    Description: API Key for the AppSync API
    Value: !GetAtt MyApiKey.ApiKey 